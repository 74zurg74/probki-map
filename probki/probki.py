import time
import re
import sys
import random

def main():
    # –ë–∞–Ω–Ω–µ—Ä Google Maps –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤
    banner = r"""
   _____       _           _   _____          _        
  / ____|     | |         | | |  __ \        | |       
 | |  __  ___ | | ___ __ _| | | |__) |___  __| |_ __   
 | | |_ |/ _ \| |/ / '__| | | |  _  // _ \/ _` | '_ \  
 | |__| | (_) |   <| |  | |_| | | \ \  __/ (_| | |_) | 
  \_____|\___/|_|\_\_|   \___/|_|  \_\___|\__,_| .__/  
                                               | |     
                                               |_|     
  """
    print(banner)
    print("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ Enter...")
    input()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = " ".join(sys.argv[1:])
    if not args:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: -q <–∫–æ–ª-–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤> -r <–º–∞—Ä—à—Ä—É—Ç> [-dtp <–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –î–¢–ü>] [-block <–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è>]")
        print("–ü—Ä–∏–º–µ—Ä: -q 100 -r –æ—Ç 59.700671,30.784673 –¥–æ 59.708113,30.783986 -dtp 59.7045,30.7850 -block 59.7058,30.7842")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    dtp_coords = None
    block_coords = None
    try:
        phones = int(re.search(r'-q\s+(\d+)', args).group(1))
        route_match = re.search(r'-r\s+–æ—Ç\s+([\d.]+),([\d.]+)\s+–¥–æ\s+([\d.]+),([\d.]+)', args)
        start_lat, start_lon = route_match.group(1), route_match.group(2)
        end_lat, end_lon = route_match.group(3), route_match.group(4)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –î–¢–ü
        dtp_match = re.search(r'-dtp\s+([\d.]+),([\d.]+)', args)
        if dtp_match:
            dtp_coords = (dtp_match.group(1), dtp_match.group(2))
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        block_match = re.search(r'-block\s+([\d.]+),([\d.]+)', args)
        if block_match:
            block_coords = (block_match.group(1), block_match.group(2))
            
    except (AttributeError, ValueError):
        print("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!")
        print("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: -q <—á–∏—Å–ª–æ> -r –æ—Ç <lat>,<lon> –¥–æ <lat>,<lon>")
        print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: -dtp <lat>,<lon> -block <lat>,<lon>")
        return
    
    # –í—ã–±–æ—Ä –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–≤
    nav_options = {
        1: {"name": "Google Maps", "icon": "üü¢", "delay": 0.2},
        2: {"name": "–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", "icon": "üîµ", "delay": 0.3},
        3: {"name": "2–ì–ò–°", "icon": "üü†", "delay": 0.25},
        4: {"name": "–í—Å–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—ã", "icon": "üåÄ", "delay": 0.1}
    }
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    for key, option in nav_options.items():
        print(f"[{key}] {option['icon']} {option['name']}")
    
    try:
        choices = list(map(int, input("> ").split(',')))
        selected_navs = []
        
        if 4 in choices:
            # –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—ã
            selected_navs = [nav_options[1], nav_options[2], nav_options[3]]
        else:
            for choice in choices:
                if choice in [1, 2, 3]:
                    selected_navs.append(nav_options[choice])
        
        if not selected_navs:
            print("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            selected_navs = [nav_options[1], nav_options[2], nav_options[3]]
    
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        selected_navs = [nav_options[1], nav_options[2], nav_options[3]]
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞–º
    nav_phones = {nav['name']: 0 for nav in selected_navs}
    for i in range(phones):
        nav = random.choice(selected_navs)
        nav_phones[nav['name']] += 1
    
    # –≠–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–∫–∏
    print(f"\nüöó –ó–∞–ø—É—Å–∫ {phones} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print(f"üìç –ú–∞—Ä—à—Ä—É—Ç: –æ—Ç ({start_lat}, {start_lon}) –¥–æ ({end_lat}, {end_lon})")
    
    if dtp_coords:
        print(f"üö® –î–¢–ü —Å–æ–∑–¥–∞–Ω–æ –≤ —Ç–æ—á–∫–µ ({dtp_coords[0]}, {dtp_coords[1]})")
        
    if block_coords:
        print(f"üöß –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–æ—Ä–æ–≥–∏ –≤ —Ç–æ—á–∫–µ ({block_coords[0]}, {block_coords[1]})")
    
    print("üõë –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–±–∫—É")
    print(f"üì± –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞–º:")
    
    for nav in selected_navs:
        count = nav_phones[nav['name']]
        print(f"   {nav['icon']} {nav['name']}: {count} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    
    completed = 0
    traffic_events = []
    
    # –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –¥–æ—Ä–æ–≥–µ
    for i in range(phones):
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 30% –∏ 70% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        percent = (i+1) / phones * 100
        if percent > 30 and random.random() < 0.1 and not traffic_events:
            traffic_events.append("üö• –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")
            print(f"\nüö• –ù–∞ –º–∞—Ä—à—Ä—É—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è!")
            
        if percent > 50 and random.random() < 0.1 and len(traffic_events) < 2:
            traffic_events.append("üö¶ –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–∑–≤—è–∑–∫–µ")
            print(f"\nüö¶ –ù–∞ —Ä–∞–∑–≤—è–∑–∫–µ –æ–±—Ä–∞–∑–æ–≤–∞–ª–∞—Å—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å!")
    
    completed = 0
    for nav in selected_navs:
        count = nav_phones[nav['name']]
        for i in range(count):
            completed += 1
            percent = completed / phones * 100
            delay = nav['delay'] * random.uniform(0.8, 1.2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π
            if dtp_coords and percent > 40 and random.random() < 0.3:
                delay *= 2
            if block_coords and percent > 60 and random.random() < 0.4:
                delay *= 1.8
                
            print(f"{nav['icon']} –¢–µ–ª–µ—Ñ–æ–Ω {completed}/{phones} "
                  f"({nav['name']}) —Å—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç... "
                  f"[{'‚ñà' * int(percent//5)}{'‚ñë' * (20 - int(percent//5))}] {percent:.1f}%", 
                  end='\r')
            time.sleep(delay)
    
    # –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–∫–∏
    intensity = phones * 10
    if dtp_coords:
        intensity += phones * 5
    if block_coords:
        intensity += phones * 7
    if dtp_coords and block_coords:
        intensity += phones * 15
    
    print("\n" + "‚úÖ –ü—Ä–æ–±–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!".center(50))
    print(f"üî• –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ñ–∏–∫–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {int(intensity)}%".center(50))
    
    # –û—Ç—á–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö
    print("\nüìä –û—Ç—á–µ—Ç –æ –¥–æ—Ä–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:")
    if dtp_coords:
        print(f"  üö® –î–¢–ü –≤ —Ç–æ—á–∫–µ ({dtp_coords[0]}, {dtp_coords[1]}) - –ø—Ä–æ–±–∫–∞ +{phones * 5}%")
    if block_coords:
        print(f"  üöß –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤ —Ç–æ—á–∫–µ ({block_coords[0]}, {block_coords[1]}) - –ø—Ä–æ–±–∫–∞ +{phones * 7}%")
    if dtp_coords and block_coords:
        print(f"  ‚ö†Ô∏è –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –î–¢–ü + –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ - –ø—Ä–æ–±–∫–∞ +{phones * 15}%")
    
    print("\nüö¶ –ü—Ä–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    if traffic_events:
        for event in traffic_events:
            print(f"  {event}")
    else:
        print("  ‚õü –î–æ—Ä–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –Ω–æ—Ä–º–µ")
    
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞–º:")
    for nav in selected_navs:
        count = nav_phones[nav['name']]
        print(f"   {nav['icon']} {nav['name']}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main()
